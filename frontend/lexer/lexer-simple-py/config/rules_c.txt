:space:+               => WS

auto		       => KW_AUTO
break		       => KW_BREAK
case		       => KW_CASE
char		       => KW_CHAR
const		       => KW_CONST
continue	       => KW_CONTINUE
default		       => KW_DEFAULT
do		       => KW_DO
double		       => KW_DOUBLE
else		       => KW_ELSE
enum		       => KW_ENUM
extern		       => KW_EXTERN
float		       => KW_FFLOAT
for		       => KW_FOR
goto		       => KW_GOTO
if		       => KW_IF
int		       => KW_INT
long		       => KW_LONG
register	       => KW_REGISTER
return		       => KW_RETURN
short		       => KW_SHORT
signed		       => KW_SIGNED
short		       => KW_SHORT
signed		       => KW_SIGNED
sizeof		       => KW_SIZEOF
static		       => KW_STATIC
struct		       => KW_STRUCT
switch		       => KW_SWITCH
typedef		       => KW_TYPEDEF
union		       => KW_UNION
unsigned	       => KW_UNSIGNED
void		       => KW_VOID
volatile	       => KW_VOLATILE
while		       => KW_WHILE

"+"		       => SYM_ADD
"-"		       => SYM_SUB
"*"		       => SYM_MUL
"/"		       => SYM_DIV
"%"		       => SYM_MOD
"="		       => SYM_SET
"=="		       => SYM_EQ
"!="		       => SYM_NE
">"		       => SYM_GT
">="		       => SYM_GE
"<"		       => SYM_LT
"<="		       => SYM_LE
"!"		       => SYM_NOT
"~"		       => SYM_BNOT
"&"		       => SYM_BAND
"|"		       => SYM_BOR
"^"		       => SYM_XOR
"&&"		       => SYM_AND
"||"		       => SYM_OR
"<<"		       => SYM_LSHIFT
">>"		       => SYM_RSHIFT
"++"		       => SYM_ADD2
"--"		       => SYM_SUB2
"."		       => SYM_DOT
"->"		       => SYM_ARROW
"("		       => SYM_LPAREN
")"		       => RYM_RPAREN
"["		       => SYM_LBRACK
"]"		       => SYM_RBRACK
"{"		       => SYM_LSCOPE
"}"		       => SYM_RSCOPE
","		       => SYM_COMMA
":"		       => SYM_COLON
";"		       => SYM_SEMI
"?"		       => SYM_INTER
"+="		       => SYM_SETADD
"-="		       => SYM_SETSUB
"*="		       => SYM_SETMUL
"/="		       => SYM_SETDIV
"%="		       => SYM_SETMOD
"&="		       => SYM_SETBAND
"|="		       => SYM_SETBOR
"^="		       => SYM_SETBXOR


"\""[^"]+"\""          => STRING
"#"[a-zA-Z_]+	       => DIRECTIVE
[a-zA-Z_][0-9a-zA-Z_]* => ID
[0-9]+                 => INT
[0-9]*"."[0-9]+        => REAL

:eof:		       => EOF

